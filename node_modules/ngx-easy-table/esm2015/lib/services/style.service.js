import { Injectable } from '@angular/core';
/* tslint:disable:no-useless-cast */
export class StyleService {
    setRowClass(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        const row = document.querySelector(selector);
        if (row) {
            row.classList.add(val.className);
        }
    }
    setCellClass(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        const cell = document.querySelector(selector);
        if (cell) {
            cell.classList.add(val.className);
        }
    }
    setRowStyle(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        const row = document.querySelector(selector);
        if (row) {
            // tslint:disable-next-line:no-string-literal
            row.style[val.attr] = val.value;
        }
    }
    setCellStyle(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        const cell = document.querySelector(selector);
        if (cell) {
            // tslint:disable-next-line:no-string-literal
            cell.style[val.attr] = val.value;
        }
    }
    pinnedWidth(pinned, column) {
        if (pinned) {
            return 150 * column + 'px';
        }
    }
}
StyleService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWFzeS10YWJsZS9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc3R5bGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLG9DQUFvQztBQUVwQyxNQUFNLE9BQU8sWUFBWTtJQUNoQixXQUFXLENBQUMsR0FBYTtRQUM5QixNQUFNLFFBQVEsR0FBRyxpQ0FBaUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUF3QixDQUFDO1FBQ3BFLElBQUksR0FBRyxFQUFFO1lBQ1AsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVNLFlBQVksQ0FBQyxHQUFjO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxvQkFBb0IsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ3pGLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUF5QixDQUFDO1FBQ3RFLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVNLFdBQVcsQ0FBQyxHQUFhO1FBQzlCLE1BQU0sUUFBUSxHQUFHLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXdCLENBQUM7UUFDcEUsSUFBSSxHQUFHLEVBQUU7WUFDUCw2Q0FBNkM7WUFDN0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztTQUNqQztJQUNILENBQUM7SUFFTSxZQUFZLENBQUMsR0FBYztRQUNoQyxNQUFNLFFBQVEsR0FBRyxpQ0FBaUMsR0FBRyxDQUFDLEdBQUcsb0JBQW9CLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUN6RixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBeUIsQ0FBQztRQUN0RSxJQUFJLElBQUksRUFBRTtZQUNSLDZDQUE2QztZQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVNLFdBQVcsQ0FBQyxNQUFlLEVBQUUsTUFBYztRQUNoRCxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sR0FBRyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDSCxDQUFDOzs7WUF4Q0YsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENlbGxDbGFzcywgQ2VsbFN0eWxlLCBSb3dDbGFzcywgUm93U3R5bGUgfSBmcm9tICcuLic7XG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLXVzZWxlc3MtY2FzdCAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0eWxlU2VydmljZSB7XG4gIHB1YmxpYyBzZXRSb3dDbGFzcyh2YWw6IFJvd0NsYXNzKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSlgO1xuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxUYWJsZVJvd0VsZW1lbnQ7XG4gICAgaWYgKHJvdykge1xuICAgICAgcm93LmNsYXNzTGlzdC5hZGQodmFsLmNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldENlbGxDbGFzcyh2YWw6IENlbGxDbGFzcyk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pID4gdGQ6bnRoLWNoaWxkKCR7dmFsLmNlbGx9KWA7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xuICAgIGlmIChjZWxsKSB7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQodmFsLmNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldFJvd1N0eWxlKHZhbDogUm93U3R5bGUpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KWA7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlUm93RWxlbWVudDtcbiAgICBpZiAocm93KSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICAgIHJvdy5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldENlbGxTdHlsZSh2YWw6IENlbGxTdHlsZSk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pID4gdGQ6bnRoLWNoaWxkKCR7dmFsLmNlbGx9KWA7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xuICAgIGlmIChjZWxsKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgICAgIGNlbGwuc3R5bGVbdmFsLmF0dHJdID0gdmFsLnZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwaW5uZWRXaWR0aChwaW5uZWQ6IGJvb2xlYW4sIGNvbHVtbjogbnVtYmVyKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAocGlubmVkKSB7XG4gICAgICByZXR1cm4gMTUwICogY29sdW1uICsgJ3B4JztcbiAgICB9XG4gIH1cbn1cbiJdfQ==